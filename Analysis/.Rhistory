stringsAsFactors = FALSE)
df_od$Profit <- as.numeric(gsub("\\$|,", "", df_od$Profit))
df_od$Sales <- as.numeric(gsub("\\$|,", "", df_od$Sales))
df_od$Sales
class(df_od$Profit)
class(df_od$Sales)
# Your code here
str(df_od$Order.Date)
df_od$Order.Date = as.Date(df_od$Order.Date, "%m/%d/%Y")
as.Date("11/11/14", "%m/%d/%Y"0)
as.Date("11/11/14", "%m/%d/%Y")
as.Date("11/11/14", "%m/%d/%y")
df_od$Order.Date = as.Date(df_od$Order.Date, "%m/%d/%y")
df_od %>% transmute(Order.Date = as.Date(Order.Date, "%m/%d%y"))
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
# Your code here
str(df_od$Order.Date)
class(df_od$Order.Date)
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(tidyr)
# Your code here
df_od <- read.csv("./data/Orders.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
dim(df_od)
str(df_od)
#prsa = cbind(df_od$Profit, df_od$Sales)
str(df_od$Profit)
str(df_od$Sales)
df_od$Profit <- as.numeric(gsub("\\$|,", "", df_od$Profit))
df_od$Sales <- as.numeric(gsub("\\$|,", "", df_od$Sales))
class(df_od$Profit)
class(df_od$Sales)
# Your code here
str(df_od$Order.Date)
class(df_od$Order.Date)
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
# Your code here
df_od <- read.csv("./data/Orders.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
dim(df_od)
str(df_od)
#prsa = cbind(df_od$Profit, df_od$Sales)
str(df_od$Profit)
str(df_od$Sales)
df_od$Profit <- as.numeric(gsub("\\$|,", "", df_od$Profit))
df_od$Sales <- as.numeric(gsub("\\$|,", "", df_od$Sales))
class(df_od$Profit)
class(df_od$Sales)
View(df_od)
# Your code here
str(df_od$Order.Date)
class(df_od$Order.Date)
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
options(encoding = 'UTF-8')
# Your code here
df_od <- read.csv("./data/Orders.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
dim(df_od)
str(df_od)
#prsa = cbind(df_od$Profit, df_od$Sales)
str(df_od$Profit)
str(df_od$Sales)
df_od$Profit <- as.numeric(gsub("\\$|,", "", df_od$Profit))
df_od$Sales <- as.numeric(gsub("\\$|,", "", df_od$Sales))
class(df_od$Profit)
class(df_od$Sales)
# Your code here
str(df_od$Order.Date)
class(df_od$Order.Date)
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
str(df_od)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyr)
# Your code here
df_od <- read.csv("./data/Orders.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
# Your code here
df_od <- read.csv("./data/Orders.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
dim(df_od)
str(df_od)
#prsa = cbind(df_od$Profit, df_od$Sales)
str(df_od$Profit)
str(df_od$Sales)
df_od$Profit <- as.numeric(gsub("\\$|,", "", df_od$Profit))
df_od$Sales <- as.numeric(gsub("\\$|,", "", df_od$Sales))
View(df_od)
class(df_od$Profit)
class(df_od$Sales)
# Your code here
str(df_od$Order.Date)
class(df_od$Order.Date)
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
options(encoding = 'UTF-8')
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
# Your code here
#df_od <- read.csv("./data/Orders.csv", header = TRUE, na.strings = "",stringsAsFactors = FALSE)
df_od <- read.csv("./data/Orders.csv",stringsAsFactors = FALSE)
dim(df_od)
str(df_od)
#prsa = cbind(df_od$Profit, df_od$Sales)
str(df_od$Profit)
str(df_od$Sales)
df_od$Profit <- as.numeric(gsub("\\$|,", "", df_od$Profit))
df_od$Sales <- as.numeric(gsub("\\$|,", "", df_od$Sales))
class(df_od$Profit)
class(df_od$Sales)
# Your code here
str(df_od$Order.Date)
class(df_od$Order.Date)
#options(encoding = 'UTF-8')
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
df_od$Ship.Date = as.Date(df_od$Ship.Date, '%m/%d/%y')
df_od$Year = format(df_od$Order.Date, '%Y')
df_od$Month = format(df_od$Order.Date, '%m')
seasonal = df_od %>%
group_by(Year, Month) %>%
summarise(agg_sales = sum(Sales)) %>%
mutate(time = paste(Year, Month, sep='-'))
library(ggplot2)
library(dplyr)
library(tidyr)
seasonal = df_od %>%
group_by(Year, Month) %>%
summarise(agg_sales = sum(Sales)) %>%
mutate(time = paste(Year, Month, sep='-'))
View(seasonal)
seasonal$time = as.factor(seasonal$time)
seasonal$time
ggplot(seasonal, aes(x=time, y=agg_sales, group = 1)) +
geom_line(aes(color = source)) +
#theme_tufte() +
#theme(plot.background = element_rect(fill = "black")) +
#theme_wsj()+ scale_colour_wsj("colors6") +
#theme_calc()+ scale_colour_calc() +
theme_hc()+ scale_colour_hc() + theme(plot.background = element_rect(fill = "black")) +
ggtitle(paste0("Weekly Ranking Trend - ", at_sel,"(",title_sel,")")) + #Selected Artists") +
xlab("DATE") + ylab("RANKING") +
theme(plot.title = element_text(color="white", size=14, face="bold.italic"),
axis.title.x = element_text(color="grey", size=12),#, face="bold"),
axis.title.y = element_text(color="grey", size=12))#, face="bold"))
library(ggthemes)
ggplot(seasonal, aes(x=time, y=agg_sales, group = 1)) +
geom_line(aes(color = source)) +
#theme_tufte() +
#theme(plot.background = element_rect(fill = "black")) +
#theme_wsj()+ scale_colour_wsj("colors6") +
#theme_calc()+ scale_colour_calc() +
theme_hc()+ scale_colour_hc() + theme(plot.background = element_rect(fill = "black")) +
ggtitle(paste0("Weekly Ranking Trend - ", at_sel,"(",title_sel,")")) + #Selected Artists") +
xlab("DATE") + ylab("RANKING") +
theme(plot.title = element_text(color="white", size=14, face="bold.italic"),
axis.title.x = element_text(color="grey", size=12),#, face="bold"),
axis.title.y = element_text(color="grey", size=12))#, face="bold"))
ggplot(seasonal, aes(x=time, y=agg_sales, group = 1)) +
geom_line(aes(color = source)) +
#theme_tufte() +
#theme(plot.background = element_rect(fill = "black")) +
#theme_wsj()+ scale_colour_wsj("colors6") +
#theme_calc()+ scale_colour_calc() +
theme_hc()+ scale_colour_hc() + theme(plot.background = element_rect(fill = "black")) +
ggtitle(paste0("Seasonal Sales Trend"))+
xlab("DATE") + ylab("Total Sales") +
theme(plot.title = element_text(color="white", size=14, face="bold.italic"),
axis.title.x = element_text(color="grey", size=12),#, face="bold"),
axis.title.y = element_text(color="grey", size=12))#, face="bold"))
ggplot(seasonal, aes(x=time, y=agg_sales, group = 1)) +
geom_line() +
#theme_tufte() +
#theme(plot.background = element_rect(fill = "black")) +
#theme_wsj()+ scale_colour_wsj("colors6") +
#theme_calc()+ scale_colour_calc() +
theme_hc()+ scale_colour_hc() + theme(plot.background = element_rect(fill = "black")) +
ggtitle(paste0("Seasonal Sales Trend"))+
xlab("DATE") + ylab("Total Sales") +
theme(plot.title = element_text(color="white", size=14, face="bold.italic"),
axis.title.x = element_text(color="grey", size=12),#, face="bold"),
axis.title.y = element_text(color="grey", size=12))#, face="bold"))
ggplot(seasonal, aes(x=time, y=agg_sales, group = 1)) +
geom_line() +
#theme_tufte() +
#theme(plot.background = element_rect(fill = "black")) +
#theme_wsj()+ scale_colour_wsj("colors6") +
#theme_calc()+ scale_colour_calc() +
theme_hc()+ scale_colour_hc() + theme(plot.background = element_rect(fill = "black")) +
ggtitle(paste0("Seasonal Sales Trend"))+
xlab("DATE") + ylab("Total Sales") +
theme(plot.title = element_text(color="white", size=14, face="bold.italic"),
axis.title.x = element_text(color="grey", size=12),#, face="bold"),
axis.title.y = element_text(color="grey", size=12))#, face="bold"))
ggplot(seasonal, aes(x=time, y=agg_sales, group = 1)) +
geom_line() +
ggtitle("Seasonal Sales Trend")+
xlab("DATE") + ylab("Total Sales") +
theme_tufte()
ggplot(seasonal, aes(x=time, y=agg_sales)) +
geom_bar(aes(fill= agg_sales), stat = "identity")
seasonal$time = as.factor(seasonal$time)
g = ggplot(data = seasonal, aes(x = time, y = agg_sales, group = 1))
g + geom_line(color = seasonal$Year)
seasonal$time = as.factor(seasonal$time)
g = ggplot(data = seasonal, aes(x = time, y = agg_sales, group = 1))
g + geom_line(color = seasonal$Year)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(ggplot2)
library(dplyr)
library(tidyr)
# Your code here
#df_od <- read.csv("./data/Orders.csv", header = TRUE, na.strings = "",stringsAsFactors = FALSE)
df_od <- read.csv("./data/Orders.csv",stringsAsFactors = FALSE)
dim(df_od)
str(df_od)
#prsa = cbind(df_od$Profit, df_od$Sales)
str(df_od$Profit)
str(df_od$Sales)
df_od$Profit <- as.numeric(gsub("\\$|,", "", df_od$Profit))
df_od$Sales <- as.numeric(gsub("\\$|,", "", df_od$Sales))
class(df_od$Profit)
class(df_od$Sales)
# Your code here
#df_od <- read.csv("./data/Orders.csv", header = TRUE, na.strings = "",stringsAsFactors = FALSE)
df_od <- read.csv("./data/Orders.csv",stringsAsFactors = FALSE)
dim(df_od)
str(df_od)
#prsa = cbind(df_od$Profit, df_od$Sales)
str(df_od$Profit)
str(df_od$Sales)
df_od$Profit <- as.numeric(gsub("\\$|,", "", df_od$Profit))
df_od$Sales <- as.numeric(gsub("\\$|,", "", df_od$Sales))
class(df_od$Profit)
class(df_od$Sales)
# Your code here
#df_od <- read.csv("./data/Orders.csv", header = TRUE, na.strings = "",stringsAsFactors = FALSE)
df_od <- read.csv("./data/Orders.csv",stringsAsFactors = FALSE)
dim(df_od)
str(df_od)
#prsa = cbind(df_od$Profit, df_od$Sales)
str(df_od$Profit)
str(df_od$Sales)
df_od$Profit <- as.numeric(gsub("\\$|,", "", df_od$Profit))
View(df_od)
str(df_od$Sales)
df_od$Sales <- as.numeric(gsub("\\$|,", "", df_od$Sales))
class(df_od$Profit)
class(df_od$Sales)
# Your code here
str(df_od$Order.Date)
class(df_od$Order.Date)
#options(encoding = 'UTF-8')
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
df_od$Ship.Date = as.Date(df_od$Ship.Date, '%m/%d/%y')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(ggplot2)
library(dplyr)
library(tidyr)
# Your code here
#df_od <- read.csv("./data/Orders.csv", header = TRUE, na.strings = "",stringsAsFactors = FALSE)
df_od <- read.csv("./data/Orders.csv",stringsAsFactors = FALSE)
dim(df_od)
str(df_od)
#prsa = cbind(df_od$Profit, df_od$Sales)
str(df_od$Profit)
str(df_od$Sales)
df_od$Profit <- as.numeric(gsub("\\$|,", "", df_od$Profit))
df_od$Sales <- as.numeric(gsub("\\$|,", "", df_od$Sales))
class(df_od$Profit)
class(df_od$Sales)
# Your code here
str(df_od$Order.Date)
class(df_od$Order.Date)
#options(encoding = 'UTF-8')
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
View(df_od)
options(encoding = 'UTF-8')
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
# Your code here
#df_od <- read.csv("./data/Orders.csv", header = TRUE, na.strings = "",stringsAsFactors = FALSE)
df_od <- read.csv("./data/Orders.csv",stringsAsFactors = FALSE)
dim(df_od)
str(df_od)
#prsa = cbind(df_od$Profit, df_od$Sales)
str(df_od$Profit)
str(df_od$Sales)
df_od$Profit <- as.numeric(gsub("\\$|,", "", df_od$Profit))
df_od$Sales <- as.numeric(gsub("\\$|,", "", df_od$Sales))
class(df_od$Profit)
class(df_od$Sales)
# Your code here
str(df_od$Order.Date)
class(df_od$Order.Date)
options(encoding = 'UTF-8')
df_od$Order.Date = as.Date(df_od$Order.Date, '%m/%d/%y')
df_od$Ship.Date = as.Date(df_od$Ship.Date, '%m/%d/%y')
df_od$Year = format(df_od$Order.Date, '%Y')
df_od$Month = format(df_od$Order.Date, '%m')
seasonal = df_od %>%
group_by(Year, Month) %>%
summarise(agg_sales = sum(Sales)) %>%
mutate(time = paste(Year, Month, sep='-'))
seasonal$time = as.factor(seasonal$time)
g = ggplot(data = seasonal, aes(x = time, y = agg_sales, group = 1))
g + geom_line(color = seasonal$Year)
seasonal_chategory = orders %>%
group_by(Year, Month, Category) %>%
summarise(agg_sales = sum(Sales)) %>%
mutate(time = paste(Year, Month, sep='-'))
library(ggplot2)
seasonal$time = as.factor(seasonal$time)
g = ggplot(data = seasonal, aes(x = time, y = agg_sales, group = 1))
g + geom_line(color = seasonal$Year)
nng matching ratio per weak (find same title and calculate ranking based on title or artist <br>
#   3) visualize grapth for ranking transition per artist/title comapare to each companies <br>
#===============================================================
# Inspiration :
#  ---------------------------------------------------------------
# ==============================================================
library(dplyr)
library(ggplot2)
library(ggthemes)
#library(data.table)
#library(dygraphs) # install.packages("dygraphs")
library(reshape2)
library(plotly)
#library(mapproj)
#library(tidyr)
#library(RSQLite)
#library(addinslist)
#library(RColorBrewer)
#library(vcd)
#library(xlsx)
#library(foreign)
#setwd("E:/Data.Science/NYCDSA/40_Projects/Shiny/Data")
setwd("C:/Users/SAMSUNG/Documents/A.MyDoc/A.DriveE/DataScience/NYCDSA/40_Projects/WebScraping/Analysis")
# Data Read/Modify/Write --------------------------------
rm(list=ls())
INIT = 1
N_RANK = 100
#raw.dt <- fread("../Data/data.csv", stringsAsFactors = F)
#raw.df <- as.data.frame(raw.dt)
df_spotify = read.csv('./z_datasets/spotify_wkly.csv', stringsAsFactors=FALSE)
df_youtube = read.csv('./z_datasets/youtubemusic.csv', stringsAsFactors=FALSE, header = FALSE,
col.names = c('start_date','end_date','rank','title','artist','views'))
df_billboard = read.csv('./z_datasets/acharts_singles.csv', stringsAsFactors=FALSE)
df_billboard_albums = read.csv('./z_datasets/acharts_albums.csv', stringsAsFactors=FALSE)
df_itunes = read.csv('./z_datasets/itunes.csv', stringsAsFactors=FALSE)
# check data Nas --------------------------------
df_list = c('df_spotify', 'df_youtube', 'df_billboard', 'df_billboard_albums', 'df_itunes')
print('Nas in df_spotify : ', sum(is.na(df_spotify)))
print('Nas in df_youtube : ', sum(is.na(df_youtube)))
print('Nas in df_billboard : ', sum(is.na(df_billboard)))
print('Nas in df_billboard_albums : ', sum(is.na(df_billboard_albums)))
print('Nas in df_itunes : ', sum(is.na(df_itunes)))
which( rowSums( is.na(df_spotify) ) != 0 )
# column name check --------------------------------
colnames(df_spotify)
colnames(df_youtube)
colnames(df_billboard)
colnames(df_billboard_albums)
colnames(df_itunes)
# column name tolower --------------------------------
#names(df) <- tolower(names(df))
# reorder columns --------------------------------
df_spotify <- df_spotify[c("start_date", "end_date", "rank","title", "artist", "streams")]
#df_youtube <- df_youtube[c("start_date", "end_date", "rank","title", "artist", "views")]
df_billboard <- df_billboard[c("date", "rank","title", "artist", "weeks")]
df_billboard_albums <- df_billboard_albums[c("date", "rank","title", "artist", "weeks")]
df_itunes <- df_itunes[c("date", "release_date", "title", "artist", "genre")]
# Summary --------------------------------
summary(df_spotify)
summary(df_youtube)
summary(df_billboard)
summary(df_billboard_albums)
summary(df_itunes)
# Change Variable Data Type ----------------------------------
df_spotify_org <- df_spotify
df_spotify <- df_spotify %>%
mutate(start_date = as.Date(start_date, "%Y-%m-%d")) %>%
mutate(end_date = as.Date(end_date, "%Y-%m-%d")) %>%
mutate(rank = as.integer(rank)) %>%
mutate(streams = as.integer(streams))
which( rowSums( is.na(df_spotify) ) != 0 )
if(sum(is.na(df_spotify))!=0){
df_spotify <- na.omit(df_spotify)
}
summary(df_spotify)
df_youtube_org <- df_youtube
df_youtube <- df_youtube %>%
mutate(start_date = as.Date(start_date, "%Y-%m-%d")) %>%
mutate(end_date = as.Date(end_date, "%Y-%m-%d")) #%>%
#mutate(rank = as.integer(rank)) # first, rank should be changed into number
which( rowSums( is.na(df_youtube) ) != 0 )
if(sum(is.na(df_youtube))!=0){
df_youtube <- na.omit(df_youtube)
}
summary(df_youtube)
df_billboard_org <- df_billboard
df_billboard <- df_billboard %>%
mutate(date = as.Date(date, "%Y-%m-%d"))
which( rowSums( is.na(df_billboard) ) != 0 )
if(sum(is.na(df_billboard))!=0){
df_billboard <- na.omit(df_billboard)
}
summary(df_billboard)
df_billboard_albums_org <- df_billboard_albums
df_billboard_albums <- df_billboard_albums %>%
mutate(date = as.Date(date, "%Y-%m-%d"))
which( rowSums( is.na(df_billboard_albums) ) != 0 )
if(sum(is.na(df_billboard_albums))!=0){
df_billboard_albums <- na.omit(df_billboard_albums)
}
summary(df_billboard_albums)
df_itunes_org <- df_itunes
# reorder rows --------------------------------
df_spotify <- arrange(df_spotify, start_date, rank)
df_youtube <- arrange(df_youtube, start_date, rank)
df_billboard <- arrange(df_billboard, date, rank)
df_billboard_albums <- arrange(df_billboard_albums, date, rank)
# Data Snooping --------------------------------
head(df_spotify,5)
head(df_youtube,5)
head(df_billboard,5)
head(df_billboard_albums,5)
head(df_itunes,5)
# Data trim to synchronize -----------------------------------
ViewPeriod = c("2017-09-15","2018-01-26")
df_spotify = subset(df_spotify, select = -c(end_date))
df_spotify <- df_spotify %>%
filter(start_date >= as.Date(ViewPeriod[1]) & start_date <= as.Date(ViewPeriod[2])) %>%
filter(rank <= 100)
df_youtube = subset(df_youtube, select = -c(end_date))
colnames(df_billboard)[1] <- "start_date"
df_billboard$start_date = df_billboard$start_date-1 # date sync with spotify and youtube
df_billboard <- df_billboard %>%
filter(start_date >= as.Date(ViewPeriod[1]) & start_date <= as.Date(ViewPeriod[2])) %>%
filter(rank <= 100)
colnames(df_billboard_albums)[1] <- "start_date"
df_billboard_albums$start_date = df_billboard_albums$start_date-1 # date sync with spotify and youtube
df_billboard_albums <- df_billboard_albums %>%
filter(start_date >= as.Date(ViewPeriod[1]) & start_date <= as.Date(ViewPeriod[2])) %>%
filter(rank <= 100)
# New column for source identification
source = rep('spotify', length(df_spotify$rank))
df_spotify$source = source
source = rep('youtube', length(df_youtube$rank))
df_youtube$source = source
source = rep('billboard', length(df_billboard$rank))
df_billboard$source = source
source = rep('billboard_albums', length(df_billboard_albums$rank))
df_billboard_albums$source = source
# Data Cleaning # remove multibyte string --------------------------------
df_spotify$title[1094] <- "Blame me"
df_spotify$title <- tolower(df_spotify$title)
df_youtube$title[166] <- "Let me down"
df_youtube$title[276] <- "Let me down"
df_youtube$title[353] <- "Let me down"
df_youtube$title[952] <- "Ready for it?"
df_youtube$title[1061] <- "Ready for it?"
df_youtube$title[1177] <- "Ready for it?"
df_youtube$title[1198] <- "Let me down"
df_youtube$title[1261] <- "Ready for it?"
df_youtube$title[1392] <- "Ready for it?"
df_youtube$title[1584] <- "Not Hot"
df_youtube$title <- tolower(df_youtube$title)
df_billboard$title <- tolower(df_billboard$title)
# Data join ---------------------------------------------------------------
df_sp = subset(df_spotify, select = -c(streams))
df_yt = subset(df_youtube, select = -c(views))
df_bb = subset(df_billboard, select = -c(weeks))
df_total = rbind(df_sp, df_yt, df_bb)
df_total$title <- tolower(df_total$title)
df_total$artist <- tolower(df_total$artist)
# Top 10 glance to compare in a week [facet_grid mode] -----------------------------------
date_range = c(as.Date("2017-09-15"), as.Date("2017-09-21"))
date_range = date_range#+ 7*2
rank_range = c(1, 10)
geom_User <- switch("Bar",
"Scatter" = geom_point(aes(color='green')),
"Bar" = geom_bar(aes(color='green'),stat="identity"),
"Histogram" = geom_histogram(aes(color='green', fill='yellow'),stat="identity"),
"Distribution" = geom_density(aes(fill='lime'),stat="identity"))
df_sel <- df_total %>%
filter(start_date >= (date_range[1]) & start_date <= (date_range[2])) %>%
filter(rank<=rank_range[2] & rank >= rank_range[1]) %>%
mutate(rank_bar = as.numeric(11-rank))
p <- ggplot(df_sel, aes(x=-rank, y=rank_bar, label=title, group=source )) +
geom_bar(aes(fill= source), stat = "identity") + #, position = "dodge") +
ggtitle(paste0("Rankings in each Sources (",rank_range[1],"~",rank_range[2],")@week of ", date_range[1] )) +
geom_text(size = 3.5, position = position_stack(vjust = 0.7)) + #1.2
facet_grid(.~source)+
xlab("Rank") +
ylab("Track Name") +
coord_flip() +
theme_tufte()
ggplotly(p)
p
